{
  "name": "shot",
  "description": "Injects a fake HTTP request/response into a node HTTP server",
  "version": "1.6.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/shot"
  },
  "main": "lib/index.js",
  "keywords": [
    "utilities",
    "http",
    "debug",
    "test"
  ],
  "engines": {
    "node": ">=0.10.32"
  },
  "dependencies": {
    "hoek": "2.x.x"
  },
  "devDependencies": {
    "lab": "5.x.x",
    "code": "1.x.x"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html -L"
  },
  "license": "BSD-3-Clause",
  "readme": "![shot Logo](https://raw.github.com/hapijs/shot/master/images/shot.png)\n\nInjects a fake HTTP request/response into a node HTTP server for simulating server logic, writing tests, or debugging. Does not use a socket\nconnection so can be run against an inactive server (server not in listen mode).\n\n[![Build Status](https://secure.travis-ci.org/hapijs/shot.png)](http://travis-ci.org/hapijs/shot)\n\nLead Maintainer: [Matt Harrison](https://github.com/mtharrison)\n\n## Example\n\n```javascript\n// Load modules\n\nvar Http = require('http');\nvar Shot = require('shot');\n\n\n// Declare internals\n\nvar internals = {};\n\n\ninternals.main = function () {\n\n    var dispatch = function (req, res) {\n\n        var reply = 'Hello World';\n        res.writeHead(200, { 'Content-Type': 'text/plain', 'Content-Length': reply.length });\n        res.end(reply);\n    };\n\n    var server = Http.createServer(dispatch);\n\n    Shot.inject(dispatch, { method: 'get', url: '/' }, function (res) {\n\n        console.log(res.payload);\n    });\n};\n\n\ninternals.main();\n```\n\nNote how `server.listen` is never called.\n\n### `Shot.inject(dispatchFunc, options, callback)`\n\nInjects a fake request into an HTTP server.\n\n- `dispatchFunc` - listener function. The same as you would pass to `Http.createServer` when making a node HTTP server. Has the signature `function (req, res)` where:\n    - `req` - a simulated request object. Inherits from `Stream.Readable`.\n    - `res` - a simulated response object. Inherits from node's `Http.ServerResponse`.\n- `options` - request options object where:\n  - `url` - a string specifying the request URL.\n  - `method` - a string specifying the HTTP request method, defaulting to `'GET'`.\n  - `headers` - an optional object containing request headers.\n  - `remoteAddress` - an optional string specifying the client remote address. Defaults to `'127.0.0.1'`.\n  - `payload` - an optional request payload. Can be a string, Buffer or object.\n  - `simulate` - an object containing flags to simulate various conditions:\n    - `end` - indicates whether the request will fire an `end` event. Defaults to `undefined`, meaning an `end` event will fire.\n    - `split` - indicates whether the request payload will be split into chunks. Defaults to `undefined`, meaning payload will not be chunked.\n    - `error` - whether the request will emit an `error` event. Defaults to `undefined`, meaning no `error` event will be emitted. If set to `true`, the emitted error will have a message of `'Simulated'`.\n    - `close` - whether the request will emit a `close` event. Defaults to `undefined`, meaning no `close` event will be emitted.\n- `callback` - the callback function using the signature `function (res)` where:\n  - `res` - a response object where:\n    - `raw` - an object containing the raw request and response objects where:\n      - `req` - the simulated request object.\n      - `req` - the simulated response object.\n    - `headers` - an object containing the response headers.\n    - `statusCode` - the HTTP status code.\n    - `payload` - the payload as a UTF-8 encoded string.\n    - `rawPayload` - the raw payload as a Buffer.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/shot/issues"
  },
  "_id": "shot@1.6.0",
  "dist": {
    "shasum": "91fa1ca49faa13b7df5473b4d81d2609c8c9e341"
  },
  "_from": "shot@1.6.0",
  "_resolved": "https://registry.npmjs.org/shot/-/shot-1.6.0.tgz"
}
